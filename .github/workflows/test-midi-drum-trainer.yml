name: MIDI Drum Trainer Automated Tests (Headless REAPER Build)

permissions:
  contents: read
  actions: write

on:
  workflow_dispatch:
  push:
    paths:
      - 'MIDI/ambrosebs_MIDI Drum Trainer.jsfx'
      - 'tests/test_midi_drum_trainer.lua'
      - '.github/workflows/test-midi-drum-trainer.yml'

env:
  REAPER_MAJOR_VERSION: "7"
  REAPER_MINOR_VERSION: "48"
  SWS_VERSION: "2.14.0.7"
  WDL_COMMIT: "3024ec8e000f769454b5ee4ac927dc5cecfc6a6b"
  ACTIONS_CACHE_VERSION: "0" # increment this to simulate cache invalidation

jobs:
  test-midi-drum-trainer:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libx11-dev libglib2.0-0 libgtk-3-0 xz-utils git cmake

      # Cache REAPER tarball only
      - name: Cache REAPER tarball
        id: cache_reaper
        uses: actions/cache@v4
        with:
          path: tmp_reaper/reaper.tar.xz
          key: ${{ env.ACTIONS_CACHE_VERSION }}-reaper-tarball-${{ env.REAPER_MAJOR_VERSION }}-${{ env.REAPER_MINOR_VERSION }}

      - name: Download REAPER tarball if needed
        if: steps.cache_reaper.outputs.cache-hit != 'true'
        env:
          REAPER_DOWNLOAD_URL: "https://www.reaper.fm/files/${{ env.REAPER_MAJOR_VERSION }}.x/reaper${{ env.REAPER_MAJOR_VERSION }}${{ env.REAPER_MINOR_VERSION }}_linux_x86_64.tar.xz"
        run: |
          mkdir -p tmp_reaper
          wget -O tmp_reaper/reaper.tar.xz $REAPER_DOWNLOAD_URL

      - name: Extract REAPER and setup directories
        run: |
          mkdir -p tmp_reaper
          tar -xf tmp_reaper/reaper.tar.xz -C tmp_reaper
          mkdir -p reaper
          cp -r tmp_reaper/reaper_linux_x86_64/* reaper/
          mkdir -p reaper/REAPER/UserPlugins
          mkdir -p reaper/REAPER/Scripts/tests

      # Cache SWS extension directly in reaper/REAPER/UserPlugins
      - name: Cache SWS Extension
        id: cache_sws
        uses: actions/cache@v4
        with:
          path: reaper/REAPER/UserPlugins/reaper_sws-x86_64.so
          key: ${{ env.ACTIONS_CACHE_VERSION }}-sws-${{ env.SWS_VERSION }}

      - name: Download and extract SWS Extension
        if: steps.cache_sws.outputs.cache-hit != 'true'
        env:
          SWS_DOWNLOAD_URL: "https://www.sws-extension.org/download/featured/sws-${{ env.SWS_VERSION }}-Linux-x86_64.tar.xz"
        run: |
          mkdir -p tmp_sws
          wget -O tmp_sws/sws.tar.xz $SWS_DOWNLOAD_URL
          tar -xf tmp_sws/sws.tar.xz -C tmp_sws
          ls tmp_sws/UserPlugins
          cp tmp_sws/UserPlugins/reaper_sws-x86_64.so reaper/REAPER/UserPlugins/

      # Cache WDL build (libSwell.so in REAPER dir)
      - name: Cache WDL headless build
        id: cache_wdl
        uses: actions/cache@v4
        with:
          path: reaper/REAPER/libSwell.so
          key: ${{ env.ACTIONS_CACHE_VERSION }}-libSwell-${{ env.WDL_COMMIT }}

      # Build WDL headless and install libSwell.so into REAPER
      - name: Build WDL headless and install libSwell.so
        if: steps.cache_wdl.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/justinfrankel/WDL.git tmp_wdl_src
          cd tmp_wdl_src
          git checkout ${WDL_COMMIT}
          cd WDL/swell
          make NOGDK=1 -Wno-error
          cp libSwell.so ../../../../reaper/REAPER/libSwell.so

      - name: Copy test script into REAPER scripts
        run: |
          cp tests/test_midi_drum_trainer.lua reaper/REAPER/Scripts/tests/

      - name: Install REAPER license
        run: |
          echo "${{ secrets.REAPER_LICENSE_KEY }}" > reaper/REAPER/license.txt

      # Combined step: start Xvfb, tail resource directory, run Hello World and main test scripts
      - name: Tail REAPER resource directory and run tests
        env:
          DISPLAY: ":99"
        run: |
          echo "Starting Xvfb for REAPER GUI..."
          Xvfb :99 &
          sleep 2

          echo "Tailing REAPER resource directory for live changes..."
          (find reaper/REAPER -type f | xargs -r tail -F 2>/dev/null | tee tail-resource.log &)

          echo "Creating Hello World Lua script..."
          echo 'reaper.ShowConsoleMsg("Hello World from GitHub Actions!\\n")' > reaper/REAPER/Scripts/tests/test_hello_world.lua

          echo "Starting REAPER Hello World test..."
          reaper/REAPER/reaper -nosplash -new -ignoreerrors -close:exit reaper/REAPER/Scripts/tests/test_hello_world.lua || true
          echo "Finished REAPER Hello World test."

          echo "Running MIDI Drum Trainer test script in REAPER..."
          reaper/REAPER/reaper -nosplash -new -ignoreerrors -close:exit reaper/REAPER/Scripts/tests/test_midi_drum_trainer.lua 2>&1 | tee reaper_test_output.log

      - name: Check test results and fail if any unit test fails
        run: |
          echo "========== MIDI Drum Trainer Test Results =========="
          cat reaper_test_output.log

          # Grep the summary and check for 'unit tests passed'
          summary=$(grep 'Summary:' reaper_test_output.log || true)
          echo "$summary"

          # Check for REAPER usage output (indicating script did not run)
          if grep -q "Usage: reaper" reaper_test_output.log; then
            echo "ERROR: REAPER printed usage instructions instead of running the script."
            exit 1
          fi

          # Fail if summary is empty (i.e., script did not run or did not output summary)
          if [[ -z "$summary" ]]; then
            echo "ERROR: No summary found in REAPER output. Script did not run or test results not printed."
            exit 1
          fi

          # Extract passed/total counts
          scenario_passed=$(echo "$summary" | sed -n 's/.* \([0-9]\+\)\/\([0-9]\+\) scenarios passed.*/\1/p')
          scenario_total=$(echo "$summary" | sed -n 's/.* \([0-9]\+\)\/\([0-9]\+\) scenarios passed.*/\2/p')
          test_passed=$(echo "$summary" | sed -n 's/.* \([0-9]\+\)\/\([0-9]\+\) unit tests passed.*/\1/p')
          test_total=$(echo "$summary" | sed -n 's/.* \([0-9]\+\)\/\([0-9]\+\) unit tests passed.*/\2/p')

          if [[ "$scenario_passed" != "$scenario_total" || "$test_passed" != "$test_total" ]]; then
            echo "ERROR: Not all scenarios or unit tests passed!"
            exit 1
          fi

          echo "All tests passed."

      - name: Upload REAPER test output log (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: reaper-test-output
          path: reaper_test_output.log

      - name: Upload REAPER resource tail log (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: reaper-resource-tail
          path: tail-resource.log
