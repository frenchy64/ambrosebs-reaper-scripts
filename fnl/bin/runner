#!/usr/bin/env fennel
;; -*- mode: fennel -*-

(local fennel (require :fennel))
(local config {:seed (tonumber (or (os.getenv "FENNEL_TEST_SEED") (math.floor (* 1000 (+ (os.time) (os.clock))))))
               :reporter :dots
               :shuffle? true})
(local tests [])
(local fixtures {:once {} :each {}})
(local errors [])
(local warnings [])

;;; Reporters

(local dots
  {:ns-start #(io.stdout:write "(")
   :ns-report #(io.stdout:write ")")
   :test-start #nil
   :test-report (fn [ok? test-name msg]
                  (io.stdout:write (if ok? "." "F")))
   :stats-report (fn [warnings errors]
                   (io.stdout:write "\n")
                   (each [_ message (ipairs warnings)]
                     (io.stderr:write "Warning: " message "\n"))
                   (each [_ [ns test-name message] (ipairs errors)]
                     (io.stderr:write
                      "Error in '" ns
                      "' in test '" test-name "':\n"
                      message "\n")))})

(local namespaces
  {:ns-start (fn [ns] (io.stdout:write ns ": "))
   :ns-report (fn [ns ok?] (io.stdout:write (if ok? "PASS" "FAIL") "\n"))
   :test-start #nil
   :test-report #nil
   :stats-report (fn [warnings errors]
                   (each [_ message (ipairs warnings)]
                     (io.stderr:write "Warning: " message "\n"))
                   (each [_ [ns test-name message] (ipairs errors)]
                     (io.stderr:write
                      "Error in '" ns
                      "' in test '" test-name "':\n"
                      message "\n")))})

;;; Configuration

(fn file-exists? [file]
  (let [fh (io.open file)]
    (when fh (fh:close))
    (not= fh nil)))

(fn setup-runner []
  (when (file-exists? ".fennel-test")
    (match (pcall fennel.dofile :.fennel-test)
      (true rc) (each [k v (pairs rc)]
                  (tset config k v))
      (false msg) (do
                    (io.stderr:write msg "\n")
                    (os.exit 1))))
  (if (= config.reporter :dots)
      (set config.reporter dots)
      (= config.reporter :namespaces)
      (set config.reporter namespaces)
      (and (= :table (type config.reporter))
           (= :function (type config.reporter.ns-start))
           (= :function (type config.reporter.ns-report))
           (= :function (type config.reporter.test-start))
           (= :function (type config.reporter.test-report))
           (= :function (type config.reporter.stats-report)))
      nil
      (not= nil config.reporter)
      (do (io.stderr:write
           "Warning: unknown or malformed reporter: "
           (fennel.view config.reporter)
           "\nUsing default: dots\n")
          (set config.reporter dots)))
  (math.randomseed config.seed)
  config)

;;; Utils

(fn module-from-file [file]
  (let [sep (package.config:sub 1 1)
        module (-> file
                   (string.gsub sep ".")
                   (string.gsub "%.fnl$" ""))]
    module))

(fn deepcopy [x]
  ((fn deepcopy [x seen]
     (match  (type x)
       :table (match (. seen x)
                x* x*
                _ (let [res {}]
                    (tset seen x res)
                    (each [k v (pairs x)]
                      (tset res
                            (deepcopy k seen)
                            (deepcopy v seen)))
                    (setmetatable res (getmetatable x))))
       _ x))
   x {}))

(macro with-no-output [expr]
  "Suppress output to stdout and stderr via the `write` method."
  `(let [stdout-mt# (. (getmetatable io.stdout) :__index)
         write# stdout-mt#.write
         pack# #(doto [$...] (tset :n (select "#" $...)))]
     (tset stdout-mt# :write (fn [fd# ...]
                               (when (and (not= fd# io.stdout)
                                          (not= fd# io.stderr))
                                 (write# fd# ...))))
     (let [res# (pack# ,expr)]
       (tset stdout-mt# :write write#)
       ((or table.unpack _G.unpack) res# 1 res#.n))))

;;; Test loading

(fn load-tests []
  (let [g _G]
    (each [_ file (ipairs arg)]
      (let [module-name (module-from-file file)
            module-tests []]
        (set-forcibly! _G (deepcopy _G))
        (table.insert tests [module-name module-tests])
        (fennel.dofile file {:env _G :scope (fennel.scope)}
                       module-name module-tests fixtures)))
    (set-forcibly! _G g)))

(fn shuffle-table [t]
  (for [i (length t) 2 -1]
    (let [j (math.random i)
          ti (. t i)]
      (tset t i (. t j))
      (tset t j ti))))

(fn shuffle-tests []
  (each [_ [_ test-ns] (ipairs tests)]
    (shuffle-table test-ns))
  (shuffle-table tests))

;;; Fixtures

(fn default-fixture [f]
  (f))

(fn compose-fixtures [f1 f2]
  (fn [g] (f1 (fn [] (f2 g)))))

(fn join-fixtures [fixtures]
  (accumulate [f default-fixture _ fixture (ipairs fixtures)]
    (compose-fixtures f fixture)))

(fn setup-fixtures [once-each]
  (each [ns fs (pairs (. fixtures once-each))]
    (tset fixtures once-each ns (join-fixtures fs))))

;;; Runner

(fn run-ns-tests [ns tests]
  (let [{: reporter} config
        oncef (or (. fixtures.once ns) default-fixture)]
    (var ok? true)
    (reporter.ns-start ns)
    (oncef
     (fn []
       (let [eachf (or (. fixtures.each ns) default-fixture)]
         (if (= 0 (length tests))
             (table.insert warnings (: "namespace '%s' has no tests" :format ns))
             (each [_ [test-name test-fn] (ipairs tests)]
               (reporter.test-start ns test-name)
               (match (with-no-output (pcall eachf test-fn))
                 (false msg) (do (set ok? false)
                                 (reporter.test-report false ns test-name msg)
                                 (table.insert errors [ns test-name msg]))
                 _ (reporter.test-report true ns test-name)))))))
    (reporter.ns-report ns ok?)))

(fn run-tests []
  (each [_ [ns tests] (ipairs tests)]
    (run-ns-tests ns tests))
  (config.reporter.stats-report warnings errors))

;;; Main script

(fn runner []
  (setup-runner)

  (io.stdout:write "Test run at " (os.date) ", seed: " config.seed "\n")

  (load-tests)

  (setup-fixtures :once)
  (setup-fixtures :each)

  (when config.shuffle?
    (shuffle-tests))

  (run-tests)

  (when (> (length errors) 0)
    (os.exit 1)))

(runner)
